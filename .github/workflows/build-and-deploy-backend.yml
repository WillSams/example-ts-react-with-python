name: Build and Deploy Graphql Api

on:
  workflow_dispatch:   # manual trigger

env:
  REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION}}.amazonaws.com
  IMAGE_NAME: example-acme-hotel-graphql
  TAG: ${{ github.sha }}
  ENV: staging

jobs:
  unit-test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      REFRESH_SECRET_KEY: ${{ secrets.REFRESH_SECRET_KEY }}      
    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics \
          --builtins=screen --per-file-ignore='specs/**/*:E9,F63,F7,F82'
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --show-source --exit-zero --max-complexity=10 \
          --max-line-length=96 --statistics --per-file-ignore='specs/**/*:E9,F63,F7,F82'

  #api-test:
    #name: API Tests  
    #runs-on: ubuntu-latest
    #steps:
    #- name: Placeholder Step
      #run: echo "Placeholder for API tests"

  build-and-push-image-to-ecr:
    #needs: api-test
    needs: unit-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:

    - name: Log into AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login To ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Build and push image to ECR
      env:
        REMOTE_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        IMAGE_TAG: ${{ github.sha }}
        ENV: ${{ env.ENV }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        REFRESH_SECRET_KEY: ${{ secrets.REFRESH_SECRET_KEY }}
        PG_URL: ${{ secrets.PG_URL }}
      run: |
        echo "Building image..."
        docker build backend/. -t $REMOTE_IMAGE:$IMAGE_TAG \
          --build-arg ENV="$ENV" \
          --build-arg SECRET_KEY="$SECRET_KEY" \
          --build-arg REFRESH_SECRET_KEY="$REFRESH_SECRET_KEY" \
          --build-arg PG_URL="$PG_URL"

        echo "Pushing image to ECR.."
        docker push $REMOTE_IMAGE:$IMAGE_TAG

  deploy-to-ecs:
    needs: build-and-push-image-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Log into AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Re-deploy Backend Service
        if: success()
        run: |
          aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER }} \
              --service ${{ secrets.ECS_SERVICE }} \
              --force-new-deployment \
              --region ${{ secrets.AWS_REGION }}
